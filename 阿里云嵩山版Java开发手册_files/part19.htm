<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>三、单元测试</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part18.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part20.htm">下一个 &gt;</a></p><p class="s15" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">三、单元测试</a><a name="bookmark35">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">1. <span class="s73">【强制】</span><span class="s66">好的单元测试必须遵守 </span>AIR <span class="s66">原则。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</span></p><p class="s74" style="padding-top: 7pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">A</span><span class="p">：Automatic（自动化）</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">I</span><span class="p">：Independent（独立性）</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">R</span><span class="p">：Repeatable（可重复）</span></p><p class="s9" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">2. <span style=" color: #C00000;">【强制】</span>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 <span class="s12">System.out </span>来进行人肉验证，必须使用 <span class="s12">assert </span>来验证。</p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">3. <span style=" color: #C00000;">【强制】</span>保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">反例：<span style=" color: #333;">method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">4. <span style=" color: #C00000;">【强制】</span>单元测试是可以重复执行的，不能受到外界环境的影响。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">正例：<span style=" color: #333;">为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">框架注入一个本地（内存）实现或者 Mock 实现。</p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>单元测试代码必须写在如下工程目录：<span class="s12">src/test/java</span>，不允许写在业务代码目录下。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">8. <span style=" color: #FFC000;">【推荐】</span>单元测试的基本目标：语句覆盖率达到 <span class="s12">70%</span>；核心模块的语句覆盖率和分支覆盖率都</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">要达到 <span class="s12">100%</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 108%;text-align: left;">说明：<span style=" color: #333;">在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">9. <span style=" color: #FFC000;">【推荐】</span>编写单元测试代码遵守 <span class="s12">BCDE </span>原则，以保证被测试模块的交付质量。</p><p class="s74" style="padding-top: 7pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">B</span><span class="p">：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">C</span><span class="p">：Correct，正确的输入，并得到预期的结果。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">D</span><span class="p">：Design，与设计文档相结合，来编写单元测试。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s42">E</span><span class="p">：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</span></p><p class="s9" style="padding-top: 1pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">10. <span style=" color: #FFC000;">【推荐】</span>对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 108%;text-align: left;">反例：<span style=" color: #333;">删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">11. <span style=" color: #FFC000;">【推荐】</span>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">在阿里巴巴企业智能事业部的内部单元测试中，使用 </span><span class="s76">ENTERPRISE_INTELLIGENCE _UNIT_TEST_</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">的前缀来标识单元测试相关代码。</p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">12. <span style=" color: #FFC000;">【推荐】</span>对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">13. <span style=" color: #FFC000;">【推荐】</span>在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">14. <span style=" color: #FFC000;">【推荐】</span>单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">15. <span style=" color: #76923B;">【参考】</span>为了更方便地进行单元测试，业务代码应避免以下情况：</p><p class="s74" style="padding-top: 4pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">构造方法中做的事情过多。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">存在过多的全局变量和静态方法。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">存在过多的外部依赖。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">存在过多的条件语句。</span></p><p class="s27" style="padding-top: 5pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</span></p><p class="s9" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">16. <span style=" color: #76923B;">【参考】</span>不要对单元测试存在如下误解：</p><p class="s74" style="padding-top: 4pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</span></p><p class="s74" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part18.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part20.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
