<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(二) 异常处理</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part16.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part18.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">(二) </a><span class="s16">异常处理</span><a name="bookmark32">&zwnj;</a></p><p class="s25" style="padding-top: 16pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>Java 类库中定义的可以通过预检查方式规避的 <span style=" color: #333;">RuntimeException </span>异常不应该通过 <span style=" color: #333;">catch </span>的方式来处理，比如：<span style=" color: #333;">NullPointerException</span>，<span style=" color: #333;">IndexOutOfBoundsException </span>等等。<span class="s21">说明：</span><span class="s48">无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不 通过 </span><span class="s12">catch NumberFormatException </span><span class="s48">来实现。</span></p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">if (obj != null) {...}</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #23292D;">try { obj.method(); } catch (NullPointerException e) {…}</span></p><p class="s25" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>异常<span style=" color: #333;">捕获后</span>不要用来做流程控制，条件控制。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span><span class="s12">catch </span>时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 <span class="s12">catch </span>尽可能进行区分异常类型，再做对应的异常处理。</p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;"><span style=" color: #967B00;">说明：</span>对大段代码进行 <span style=" color: #333;">try</span>-<span style=" color: #333;">catch</span>，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">正例：<span style=" color: #23292D;">用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</span></p><p class="s9" style="padding-top: 10pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">4. <span style=" color: #C00000;">【强制】</span>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">5. <span style=" color: #C00000;">【强制】</span>事务场景中，抛出异常被 catch 后，如果需要回滚，一定要注意手动回滚事务。</p><p class="s9" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span>finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">如果 JDK7 及以上，可以使用 try-with-resources 方式。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">不要在 </span>finally <span style=" color: #23292D;">块中使用 </span>return<span style=" color: #23292D;">。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处存在 return 语句，则在此直接返回，无情丢弃掉try 块中的返回点。</span></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：</p><p class="s28" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">private int <span style=" color: #000;">x </span><span style=" color: #A67E58;">= </span><span style=" color: #976800;">0</span><span style=" color: #999;">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 72pt;text-indent: -18pt;line-height: 85%;text-align: left;">public int <span style=" color: #DD4968;">checkReturn</span><span style=" color: #999;">() { </span>try <span style=" color: #999;">{</span></p><p class="s31" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;">// x 等于 1，此处不返回 <span style=" color: #07A;">return </span><span style=" color: #A67E58;">++</span><span style=" color: #000;">x</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">} <span style=" color: #07A;">finally </span>{</p><p class="s31" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;">// 返回的结果是 2 <span style=" color: #07A;">return </span><span style=" color: #A67E58;">++</span><span style=" color: #000;">x</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">8. <span style=" color: #C00000;">【强制】</span>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</span></p><p class="s25" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><span style=" color: #333;">9. </span><span style=" color: #C00000;">【强制】</span>在调用 <span class="s51">RPC</span>、二方包、或动态生成类的相关方法时，捕捉异常必须使用 <span class="s51">Throwable</span></p><p class="s25" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">类来进行拦截。</p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;"><span style=" color: #967B00;">说明：</span>通过反射机制来调用方法，如果找不到方法，抛出 <span class="s53">NoSuchMethodException</span>。什么情况会抛出 <span class="s53">NoSuchMethodError </span>呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：<span class="s53">ASM</span>）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出 <span class="s53">NoSuchMethodError</span>。</p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">10. <span style=" color: #FFC000;">【推荐】</span>方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 <span class="s12">null </span>值。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11. <span style=" color: #FFC000;">【推荐】</span>防止 <span class="s12">NPE</span>，是程序员的基本修养，注意 <span class="s12">NPE </span>产生的场景：</p><p style="padding-left: 63pt;text-indent: -15pt;line-height: 110%;text-align: left;">1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<span style=" color: #FF4500;">反例：</span>public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 19pt;text-align: left;">2） 数据库的查询结果可能为 null。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;line-height: 109%;text-align: left;">3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 109%;text-align: left;">6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。<span style=" color: #009757;">正例：</span>使用 JDK8 的 Optional 类来防止 NPE 问题。</p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">12. <span style=" color: #FFC000;">【推荐】</span>定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">13. <span style=" color: #76923B;">【参考】</span>对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、 errorMessage；而应用内部直接抛出异常即可。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">关于 RPC 方法返回方式使用 Result 方式的理由：</span></p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 109%;text-align: left;">2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part16.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part18.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
