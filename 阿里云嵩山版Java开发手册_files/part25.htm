<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(四) ORM映射</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part24.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part26.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">(四) ORM 映射</a><a name="bookmark47">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;line-height: 106%;text-align: justify;">1. <span style=" color: #C00000;">【强制】</span>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。<span class="s21">说明：</span><span class="s12">1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。3）无用字段增加网络消耗，尤其是 text 类型的字段。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">2. <span style=" color: #C00000;">【强制】</span>POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。</span></p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义&lt;resultMap&gt;；反过来，每一个表也必然有一个&lt;resultMap&gt;与之对应。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">配置映射关系，使字段与 DO 类解耦，方便维护。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>sql.<span class="s12">xml </span>配置参数使用：#{}，#<span class="s12">param</span># 不要使用${} 此种方式容易出现 <span class="s12">SQL </span>注入。</p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;line-height: 106%;text-align: left;">5. <span style=" color: #C00000;">【强制】</span><span class="s12">iBATIS </span>自带的 <span class="s12">queryForList(String statementName</span>,<span class="s12">int start</span>,<span class="s12">int size)</span>不推荐使用。 <span class="s21">说明：</span><span class="s12">其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start,size 的子集合。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：</p><p class="s30" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">Map</span>&lt;<span style=" color: #DD4968;">String</span>, <span style=" color: #DD4968;">Object</span>&gt; <span style=" color: #000;">map </span><span style=" color: #A67E58;">= </span><span style=" color: #07A;">new </span><span style=" color: #000;">HashMap</span><span style=" color: #A67E58;">&lt;&gt;</span>(16); <span style=" color: #000;">map</span>.<span style=" color: #DD4968;">put</span>(<span style=" color: #50A04F;">&quot;start&quot;</span>, <span style=" color: #000;">start</span>);</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #000;">map</span>.<span style=" color: #DD4968;">put</span>(<span style=" color: #50A04F;">&quot;size&quot;</span>, <span style=" color: #000;">size</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">6. <span style=" color: #C00000;">【强制】</span>不允许直接拿 <span class="s12">HashMap </span>与 <span class="s12">Hashtable </span>作为查询结果集的输出。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">反例：<span style=" color: #333;">某同学为避免写一个&lt;resultMap&gt;xxx&lt;/resultMap&gt;，直接使用 HashTable 来接收数据库返回结果，结果出现日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">8. <span style=" color: #FFC000;">【推荐】</span>不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">9. <span style=" color: #76923B;">【参考】</span>@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">10. <span style=" color: #76923B;">【参考】</span>&lt;isEqual&gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；&lt;isNotEmpty&gt;表示不为空且不为 null 时执行；&lt;isNotNull&gt;表示不为 null 值时执行。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part24.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part26.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
