<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(一) 命名风格</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part3.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part5.htm">下一个 &gt;</a></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">(一) 命名风格</a><a name="bookmark15">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span style=" color: #000;">1. </span><span style=" color: #C00000;">【强制】</span>代码中的命名均不能以<span style=" color: #00F;">下划线或美元符号</span>开始，也不能以<span style=" color: #00F;">下划线或美元符号</span>结束。</p><p class="s19" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span style=" color: #FF4500;">反例：</span>_name / <u>&nbsp;</u>name / $name / name_ / name$ / name<u>  </u></p><p class="s12" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;line-height: 107%;text-align: left;"><span class="s9">2. </span><span class="s3">【强制】</span><span class="s9">所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</span><span style=" color: #967B00;">说明：</span>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。 <span style=" color: #009757;">正例：</span>ali / alibaba / taobao / cainiao/ aliyun/ youku / hangzhou 等国际通用的名称，可视同英文。 <span style=" color: #FF4500;">反例：</span>DaZhePromotion [打折] / getPingfenByName() [评分] / String fw[福娃] / int 某变量 = 3</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>代码和注释中都要避免使用任何语言的种族歧视性词语。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">日本人 / 印度人 / blockList / allowList / secondary</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #333;">RIBENGUIZI / Asan / blackList / whiteList / slave</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO / UID 等。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">ForceCode  /  UserDO  /  HtmlDTO  /  XmlService  /  TcpUdpDeal  /  TaPromotion</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #333;">forcecode  /  UserDo  /  HTMLDto  /  XMLService  /  TCPUDPDeal  /  TAPromotion</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例： <span style=" color: #333;">localValue / getHttpMessage() / inputUserId</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #333;">MAX_COUNT / EXPIRED_TIME</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">8. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">类型与中括号紧挨相连来表示数组。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">定义整形数组 int[] arrayDemo。</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #23292D;">在 main 参数中，使用 String args[]来定义。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">9. <span style=" color: #C00000;">【强制】</span>POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p><p class="s27" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要在&lt;resultMap&gt;设置从 is_xxx 到 xxx 的映射关系。</span></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;"><span style=" color: #FF4500;">反例：</span>定<span style=" color: #23292D;">义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时候，“误以为</span>”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">10. <span style=" color: #C00000;">【强制】</span>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<span style=" color: #00F;">单数</span>形式，但是类名如果有复数含义，类名可以使用复数形式。</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;"><span style=" color: #009757;">正例：</span>应<span style=" color: #23292D;">用工具类包名为 </span>com.alibaba.ei.kunlun.aap.util、类名为 MessageUtils（此规则参考 spring 的框架结构）</p><p class="s25" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">11. <span style=" color: #C00000;">【强制】</span>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">说明：<span style=" color: #23292D;">子类、父类成员变量名相同，即使是 public 类型的变量也能够通过编译，另外，局部变量在同一方法内的不同代码块中同名也是合法的，这些情况都要避免。对于非 setter/getter 的参数名称也要避免与成员变量名称相同。</span></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">反例：</p><p class="s28" style="padding-top: 1pt;padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;">public class <span style=" color: #000;">ConfusingName </span><span style=" color: #999;">{ </span>public int <span style=" color: #000;">stock</span><span style=" color: #999;">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// 非 setter/getter 的参数名称，不允许与本类成员变量同名</p><p class="s30" style="padding-left: 90pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public void </span><span style=" color: #DD4968;">get</span>(<span style=" color: #000;">String alibaba</span>) { <span style=" color: #07A;">if </span>(<span style=" color: #000;">condition</span>) {</p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">final int <span style=" color: #000;">money </span><span style=" color: #A67E58;">= </span><span style=" color: #976800;">666</span><span style=" color: #999;">;</span></p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// ...</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #07A;">for </span>(<span style=" color: #07A;">int </span><span style=" color: #000;">i </span><span style=" color: #A67E58;">= </span><span style=" color: #976800;">0</span>; <span style=" color: #000;">i </span><span style=" color: #A67E58;">&lt; </span><span style=" color: #976800;">10</span>; <span style=" color: #000;">i</span><span style=" color: #A67E58;">++</span>) {</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 在同一方法体中，不允许与其它代码块中的 money 命名相同</p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">final int <span style=" color: #000;">money </span><span style=" color: #A67E58;">= </span><span style=" color: #976800;">15978</span><span style=" color: #999;">;</span></p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// ...</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">class <span style=" color: #000;">Son </span>extends <span style=" color: #000;">ConfusingName </span><span style=" color: #999;">{</span></p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 不允许与父类的成员变量名称相同</p><p class="s28" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">public int <span style=" color: #000;">stock</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12. <span style=" color: #C00000;">【强制】</span>杜绝完全不规范的缩写，避免望文不知义。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #333;">AbstractClass“缩写”成 AbsClass；condition“缩写”成 condi；Function 缩写”成 Fu，此类随意缩写严重降低了代码的可阅读性。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">13. <span style=" color: #FFC000;">【推荐】</span>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达。</p><p class="s26" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;"><span style=" color: #009757;">正例：</span>对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。<span style=" color: #FF4500;">反例：</span>常见的方法内变量为 int a;的定义方式。</p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">14. <span style=" color: #FFC000;">【推荐】</span><span style=" color: #23292D;">在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #23292D;">startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">15. <span style=" color: #FFC000;">【推荐】</span>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">说明：<span style=" color: #23292D;">将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</span><span style=" color: #009757;">正例： </span><span style=" color: #333;">public class OrderFactory;</span></p><p style="padding-left: 79pt;text-indent: 0pt;text-align: justify;">public class LoginProxy;</p><p style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: justify;">public class ResourceObserver;</p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">16. <span style=" color: #FFC000;">【推荐】</span>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">正例：<span style=" color: #333;">接口方法签名 void commit();</span></p><p style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: justify;">接口基础常量 String COMPANY = &quot;alibaba&quot;;</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;"><span style=" color: #FF4500;">反例：</span>接口方法定义 <span style=" color: #000;">public abstract </span>void f();</p><p class="s27" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">17. 接口和实现类的命名有两套规则：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1）<span style=" color: #C00000;">【强制】</span>对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Impl 的后缀与接口区别。</p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">CacheServiceImpl 实现 CacheService 接口。</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 109%;text-align: left;">2）<span style=" color: #FFC000;">【推荐】</span>如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形容词）。<span style=" color: #009757;">正例：</span>AbstractTranslator 实现 Translatable 接口。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">18. <span style=" color: #76923B;">【参考】</span>枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</span></p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">19. <span style=" color: #76923B;">【参考】</span>各层命名规约：</p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;">A) Service/DAO 层方法命名规约</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">1） 获取单个对象的方法用 get 做前缀。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">2） 获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 109%;text-align: left;">3） 获取统计值的方法用 count 做前缀。 4） 插入的方法用 save/insert 做前缀。 5） 删除的方法用 remove/delete 做前缀。 6） 修改的方法用 update 做前缀。</p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;">B) 领域模型命名规约</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">1） 数据对象：xxxDO，xxx 即为数据表名。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">3） 展示对象：xxxVO，xxx 一般为网页名称。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part3.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part5.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
