<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(三) 日志规约</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part17.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part19.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark29">(三) </a><span class="s16">日志规约</span><a name="bookmark33">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>应用中不可直接使用日志系统<span class="s12">（Log</span>4<span class="s12">j</span>、<span class="s12">Logback）</span>中的 <span class="s12">API</span>，而应依赖使用日志框架</p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;">（SLF4J、JCL--Jakarta Commons Logging）<span class="s66">中的 </span>API<span class="s66">，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</span></p><p class="s27" style="padding-left: 59pt;text-indent: -16pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">日志框架（SLF4J、JCL--Jakarta Commons Logging）的使用方式（推荐使用 SLF4J）使用 SLF4J：</span></p><p class="s29" style="padding-left: 59pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">import </span>org<span style=" color: #999;">.</span>slf4j<span style=" color: #999;">.</span>Logger<span style=" color: #999;">; </span><span style=" color: #07A;">import </span>org<span style=" color: #999;">.</span>slf4j<span style=" color: #999;">.</span>LoggerFactory<span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 59pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span style=" color: #07A;">private static final </span><span style=" color: #000;">Logger logger </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">LoggerFactory</span>.<span style=" color: #DD4968;">getLogger</span>(<span style=" color: #000;">Test</span>.<span style=" color: #07A;">class</span>);</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 15pt;text-align: left;">使用 JCL：</p><p class="s29" style="padding-left: 59pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">import </span>org<span style=" color: #999;">.</span>apache<span style=" color: #999;">.</span>commons<span style=" color: #999;">.</span>logging<span style=" color: #999;">.</span>Log<span style=" color: #999;">; </span><span style=" color: #07A;">import </span>org<span style=" color: #999;">.</span>apache<span style=" color: #999;">.</span>commons<span style=" color: #999;">.</span>logging<span style=" color: #999;">.</span>LogFactory<span style=" color: #999;">;</span></p><p class="s30" style="padding-top: 1pt;padding-left: 59pt;text-indent: 0pt;text-align: left;"><span style=" color: #07A;">private static final </span><span style=" color: #000;">Log log </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">LogFactory</span>.<span style=" color: #DD4968;">getLog</span>(<span style=" color: #000;">Test</span>.<span style=" color: #07A;">class</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 42pt;text-indent: -18pt;text-align: justify;">2. <span style=" color: #C00000;">【强制】</span>所有日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。对于当天日志，以“应用名.log”来保存，保存在/home/admin/应用名/logs/目录下，过往日志格式为: {logname}.log.{保存日期}，日期格式：yyyy-MM-dd</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">以 aap 应用为例，日志保存在/home/admin/aapserver/logs/aap.log，历史日志名称为</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">aap.log.2016-08-01</p><p class="s9" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存的日志不少于六个月，并且进行网络多机备份。</p><p class="s9" style="padding-top: 5pt;padding-left: 42pt;text-indent: -18pt;line-height: 107%;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>应用中的扩展日志<span class="s12">（</span>如打点、临时监控、访问日志等<span class="s12">）</span>命名方式： <span class="s12">appName_logType_logName.log。logType:日志类型，如 stats/monitor/access 等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</span></p><p class="s27" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">正例：<span style=" color: #333;">mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</span></p><p class="s9" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>在日志输出时，字符串变量之间的拼接使用占位符的方式。</p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;"><span style=" color: #967B00;">说明：</span>因为 <span class="s53">String </span>字符串的拼接会使用 <span class="s53">StringBuilder </span>的 <span class="s53">append()</span>方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p><p class="s68" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span class="s24">正例：</span><span style=" color: #000;">logger</span>.<span style=" color: #DD4968;">debug</span>(<span style=" color: #690;">&quot;Processing trade with id: {} and symbol: {}&quot;</span>, <span style=" color: #000;">id</span>, <span style=" color: #000;">symbol</span>);</p><p class="s52" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><span class="s9">6. </span><span class="s3">【强制】</span><span class="s25">对于 </span>trace<span class="s51">/</span>debug<span class="s51">/</span>info <span class="s25">级别的日志输出，必须进行日志级别的开关判断。</span></p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;"><span style=" color: #967B00;">说明：</span>虽然在 <span class="s53">debug(</span>参数<span class="s53">)</span>的方法体内第一行代码 <span class="s53">isDisabled(Level.DEBUG_INT)</span>为真时（<span class="s71">Slf4j </span>的常见实现 <span class="s71">Log4j </span>和 <span class="s71">Logback</span>），就直接 <span class="s53">return</span>，但是参数可能会进行字符串拼接运算。此外，如果 <span class="s53">debug(getName())</span>这种参数内有 <span class="s53">getName()</span>方法调用，无谓浪费方法调用的开销。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：</p><p class="s31" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// 如果判断为真，那么可以输出 trace 和 debug 级别的日志</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">logger</span>.<span style=" color: #DD4968;">isDebugEnabled</span>()) {</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #000;">logger</span>.<span style=" color: #DD4968;">debug</span>(<span style=" color: #50A04F;">&quot;Current ID is: {} and name is: {}&quot;</span>, <span style=" color: #000;">id</span>, <span style=" color: #DD4968;">getName</span>());</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 <span class="s12">additivity</span>=<span class="s12">false</span>。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</span></p><p class="s9" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">8. <span style=" color: #C00000;">【强制】</span>生产环境禁止直接使用 System.out 或System.err 输出日志或使用</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">e.printStackTrace()打印异常堆栈。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">标准日志输出与标准错误输出文件每次 Jboss 重启时才滚动，如果大量输出送往这两个文件，容易造成文件大小超过操作系统大小限制。</span></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">9. <span style=" color: #C00000;">【强制】</span>异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 <span class="s12">throws </span>往上抛出。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span class="s72">logger.error(&quot;inputParams:{} and errorMessage:{}&quot;, 各类参数或者对象 toString(), e.getMessage(), e);</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">10. <span style=" color: #C00000;">【强制】</span>日志打印时禁止直接用 JSON 工具将对象转换成 String。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">如果对象里某些 get 方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流程的执行。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">打印日志时仅打印出业务相关属性值或者调用其对象的 toString()方法。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">11. <span style=" color: #FFC000;">【推荐】</span>谨慎地记录日志。生产环境禁止输出 <span class="s12">debug </span>日志<span class="s12">；</span>有选择地输出 <span class="s12">info </span>日志<span class="s12">；</span>如果使用 <span class="s12">warn </span>来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</span></p><p class="s25" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">12. <span style=" color: #FFC000;">【推荐】</span>可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。</span></p><p class="s25" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">13. <span style=" color: #FFC000;">【推荐】</span>尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part17.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part19.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
