<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(四) OOP规约</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part6.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part8.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">(四) OOP 规约</a><a name="bookmark18">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用<span style=" color: #00F;">类名</span>来访问即可。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>所有的覆写方法，必须加@<span class="s12">Override </span>注解。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>相同参数类型，相同业务含义，才可以使用 <span class="s12">Java </span>的可变参数，避免使用 <span class="s12">Object</span>。</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;"><span style=" color: #967B00;">说明：</span>可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程）<span style=" color: #009757;">正例：</span>public List&lt;User&gt; listUsers(String type, Long... ids) {...}</p><p class="s9" style="padding-top: 9pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@<span class="s12">Deprecated </span>注解，并清晰地说明采用的新接口或者新服务是什么。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>不能使用过时的类或方法。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span><span class="s12">Object </span>的 <span class="s12">equals </span>方法容易抛空指针异常，应使用常量或确定有值的对象来调用 <span class="s12">equals</span>。</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;"><span style=" color: #009757;">正例：</span>&quot;test&quot;.equals(object);<span style=" color: #FF4500;">反例：</span>object.equals(&quot;test&quot;);</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b)</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>所有整型包装类对象之间<span style=" color: #00F;">值的比较，</span>全部使用 equals 方法比较。</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;"><span style=" color: #967B00;">说明：</span>对于 Integer var = ? 在<span style=" color: #00F;">-128 至 127 </span>之间的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p><p class="s9" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">8. <span style=" color: #C00000;">【强制】</span>任何货币金额，均以最小货币单位且整型类型来进行存储。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">9. <span style=" color: #C00000;">【强制】</span>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">来判断。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<a href="https://detail.tmall.com/item.htm?spm=a1z10.3-b.w4011-16861154605.57.37a81b8bGVGoJD&amp;id=575107529181&amp;rn=f1294dc1e36859a5098c36756bafb4a0&amp;abbucket=18" style=" color: #23292D; font-family:微软雅黑, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt;" target="_blank">浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考</a><span style=" color: #0366D5; font-family:微软雅黑, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 10.5pt;">《码出高效》</span><span style=" color: #23292D;">。</span></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：</p><p class="s33" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">float </span><span style=" color: #000;">a </span>= <span style=" color: #976800;">1.0F </span>- <span style=" color: #976800;">0.9F</span><span style=" color: #999;">; </span><span style=" color: #07A;">float </span><span style=" color: #000;">b </span>= <span style=" color: #976800;">0.9F </span>- <span style=" color: #976800;">0.8F</span><span style=" color: #999;">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #07A;">if </span><span style=" color: #999;">(</span>a <span style=" color: #A67E58;">== </span>b<span style=" color: #999;">) {</span></p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 预期进入此代码块，执行其它业务逻辑</p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// 但事实上 a==b 的结果为 false</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: justify;"><span style=" color: #000;">Float x </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">Float</span>.<span style=" color: #DD4968;">valueOf</span>(<span style=" color: #000;">a</span>); <span style=" color: #000;">Float y </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">Float</span>.<span style=" color: #DD4968;">valueOf</span>(<span style=" color: #000;">b</span>); <span style=" color: #07A;">if </span>(<span style=" color: #000;">x</span>.<span style=" color: #DD4968;">equals</span>(<span style=" color: #000;">y</span>)) {</p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">// 预期进入此代码块，执行其它业务逻辑</p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">// 但事实上 equals 的结果为 false</p><p class="s30" style="text-indent: 0pt;line-height: 14pt;text-align: center;">}</p><p class="s24" style="padding-left: 21pt;text-indent: 0pt;line-height: 19pt;text-align: center;">正例：</p><p class="s45" style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">(1) 指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</p><p class="s33" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: justify;"><span style=" color: #07A;">float </span><span style=" color: #000;">a </span>= <span style=" color: #976800;">1.0F </span>- <span style=" color: #976800;">0.9F</span><span style=" color: #999;">; </span><span style=" color: #07A;">float </span><span style=" color: #000;">b </span>= <span style=" color: #976800;">0.9F </span>- <span style=" color: #976800;">0.8F</span><span style=" color: #999;">; </span><span style=" color: #07A;">float </span><span style=" color: #000;">diff </span>= <span style=" color: #976800;">1e-6F</span><span style=" color: #999;">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">Math</span>.<span style=" color: #DD4968;">abs</span>(<span style=" color: #000;">a </span><span style=" color: #A67E58;">- </span><span style=" color: #000;">b</span>) <span style=" color: #A67E58;">&lt; </span><span style=" color: #000;">diff</span>) { <span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;true&quot;</span>);</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p class="s45" style="padding-left: 47pt;text-indent: 0pt;text-align: left;">(2) 使用 BigDecimal 来定义值，再进行浮点数的运算操作。</p><p class="s29" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: justify;">BigDecimal a <span style=" color: #A67E58;">= </span><span style=" color: #07A;">new </span>BigDecimal<span style=" color: #999;">(</span><span style=" color: #50A04F;">&quot;1.0&quot;</span><span style=" color: #999;">); </span>BigDecimal b <span style=" color: #A67E58;">= </span><span style=" color: #07A;">new </span>BigDecimal<span style=" color: #999;">(</span><span style=" color: #50A04F;">&quot;0.9&quot;</span><span style=" color: #999;">); </span>BigDecimal c <span style=" color: #A67E58;">= </span><span style=" color: #07A;">new </span>BigDecimal<span style=" color: #999;">(</span><span style=" color: #50A04F;">&quot;0.8&quot;</span><span style=" color: #999;">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;">BigDecimal x <span style=" color: #A67E58;">= </span>a<span style=" color: #999;">.</span><span style=" color: #DD4968;">subtract</span><span style=" color: #999;">(</span>b<span style=" color: #999;">); </span>BigDecimal y <span style=" color: #A67E58;">= </span>b<span style=" color: #999;">.</span><span style=" color: #DD4968;">subtract</span><span style=" color: #999;">(</span>c<span style=" color: #999;">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">x</span>.<span style=" color: #DD4968;">compareTo</span>(<span style=" color: #000;">y</span>) == 0) { <span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;true&quot;</span>);</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">如上所示 BigDecimal 的等值比较应使用 compareTo()方法，而不是 equals()方法。</span></p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span style=" color: #967B00;">说明：</span>equals()方法会比较值和精度<span class="s46">（1.0 与 1.00 返回结果为 false）</span>，而 compareTo()则会忽略精度。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">数据库字段的 bigint 必须与类属性的 Long 类型相对应。</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">反例：<span style=" color: #23292D;">某个案例的数据库表 id 字段定义类型bigint unsigned，实际类对象属性为 Integer，随着 id 越来越大，超过 Integer 的表示范围而溢出成为负数。</span></p><p class="s25" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;line-height: 106%;text-align: left;"><span style=" color: #333;">12. </span><span style=" color: #C00000;">【强制】</span>禁止使用构造方法 <span class="s47">BigDecimal(double)</span>的方式把 <span style=" color: #000;">double 值</span>转化为 <span class="s47">BigDecimal </span><span style=" color: #000;">对象</span>。<span class="s21">说明：</span><span class="s48">BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。如：BigDecimal g = new BigDecimal(0.1F); 实际的存储值为：0.10000000149</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了</span></p><p class="s26" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Double 的 toString，而 Double 的toString 按 double 的实际能表达的精度对尾数进行了截断。</p><p class="s30" style="padding-top: 2pt;padding-left: 60pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">BigDecimal recommend1 </span><span style=" color: #A67E58;">= </span><span style=" color: #07A;">new </span><span style=" color: #000;">BigDecimal</span>(<span style=" color: #690;">&quot;0.1&quot;</span>); <span style=" color: #000;">BigDecimal recommend2 </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">BigDecimal</span>.<span style=" color: #DD4968;">valueOf</span>(<span style=" color: #990054;">0.1</span>);</p><p class="s9" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">13. 关于基本数据类型与包装数据类型的使用标准如下：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1） <span style=" color: #C00000;">【强制】</span>所有的 POJO 类属性必须使用包装数据类型。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） <span style=" color: #C00000;">【强制】</span>RPC 方法的返回值和参数必须使用包装数据类型。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">3） <span style=" color: #FFC000;">【推荐】</span>所有的局部变量使用基本数据类型。</p><p class="s27" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">正例：<span style=" color: #333;">数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">反例：<span style=" color: #333;">某业务的交易报表上显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">14. <span style=" color: #C00000;">【强制】</span>定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性<span style=" color: #00F;">默认值</span>。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">反例：<span style=" color: #333;">POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">15. <span style=" color: #C00000;">【强制】</span>序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">注意 serialVersionUID 不一致会抛出序列化运行时异常。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">16. <span style=" color: #C00000;">【强制】</span>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: justify;">17. <span style=" color: #C00000;">【强制】</span>POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt; generate toString</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: justify;">时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">18. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">禁止在 </span>POJO <span style=" color: #23292D;">类中，同时存在对应属性 </span>xxx <span style=" color: #23292D;">的 </span>isXxx()<span style=" color: #23292D;">和 </span>getXxx()<span style=" color: #23292D;">方法。</span></p><p class="s27" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">说明：<span style=" color: #23292D;">框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到的。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">19. <span style=" color: #FFC000;">【推荐】</span>使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：</p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">String str <span style=" color: #A67E58;">= </span><span style=" color: #50A04F;">&quot;a,b,c,,&quot;</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span style=" color: #000;">String</span>[] <span style=" color: #000;">ary </span><span style=" color: #A67E58;">= </span><span style=" color: #000;">str</span>.<span style=" color: #DD4968;">split</span>(<span style=" color: #50A04F;">&quot;,&quot;</span>);</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #6F8090;">// 预期大于 3，结果是 3 </span><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #000;">ary</span>.<span style=" color: #000;">length</span>);</p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">20. <span style=" color: #FFC000;">【推荐】</span>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">21. <span style=" color: #FFC000;">【推荐】 </span>类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter / setter</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">方法。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">说明：<span style=" color: #333;">公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: justify;">22. <span style=" color: #FFC000;">【推荐】</span>setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：</p><p class="s30" style="padding-top: 2pt;padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public </span><span style=" color: #000;">Integer getData </span>() { <span style=" color: #07A;">if </span>(<span style=" color: #000;">condition</span>) {</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span style=" color: #07A;">return this</span>.<span style=" color: #000;">data </span><span style=" color: #A67E58;">+ </span><span style=" color: #976800;">100</span>;</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">} <span style=" color: #07A;">else </span>{</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #07A;">return this</span>.<span style=" color: #000;">data </span><span style=" color: #A67E58;">- </span><span style=" color: #976800;">100</span>;</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">23. <span style=" color: #FFC000;">【推荐】</span>循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">下例中，反编译出的字节码文件显示每次循环都会 new 出一个StringBuilder 对象，然后进行 append</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。<span style=" color: #FF4500;">反例：</span></p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;">String str <span style=" color: #A67E58;">= </span><span style=" color: #50A04F;">&quot;start&quot;</span><span style=" color: #999;">;</span></p><p class="s29" style="padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">for </span><span style=" color: #999;">(</span><span style=" color: #07A;">int </span>i <span style=" color: #A67E58;">= </span><span style=" color: #976800;">0</span><span style=" color: #999;">; </span>i <span style=" color: #A67E58;">&lt; </span><span style=" color: #976800;">100</span><span style=" color: #999;">; </span>i<span style=" color: #A67E58;">++</span><span style=" color: #999;">) { </span>str <span style=" color: #A67E58;">= </span>str <span style=" color: #A67E58;">+ </span><span style=" color: #50A04F;">&quot;hello&quot;</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p class="s9" style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">24. <span style=" color: #FFC000;">【推荐】</span><span class="s12">final </span>可以声明类、成员变量、方法、以及本地变量，下列情况使用 <span class="s12">final </span>关键字：</p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;">1） 不允许被继承的类，如：String 类。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） 不允许修改引用的域对象，如：POJO 类的域变量。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">3） 不允许被覆写的方法，如：POJO 类的 setter 方法。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">4） 不允许运行过程中重新赋值的局部变量。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">5） 避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</p><p class="s9" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">25. <span style=" color: #FFC000;">【推荐】</span>慎用 <span class="s12">Object </span>的 <span class="s12">clone </span>方法来拷贝对象。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">对象 clone 方法默认是浅拷贝，若想实现深拷贝，需覆写 clone 方法实现域对象的深度遍历式拷贝。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">26. <span style=" color: #FFC000;">【推荐】</span>类成员与方法访问控制从严：</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 110%;text-align: left;">1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 2） 工具类不允许有 public 或 default 构造方法。</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 110%;text-align: left;">3） 类非 static 成员变量并且与子类共享，必须是 protected。 4） 类非 static 成员变量并且仅在本类使用，必须是private。</p><p style="padding-top: 4pt;padding-left: 47pt;text-indent: 0pt;line-height: 110%;text-align: left;">5） 类 static 成员变量如果仅在本类使用，必须是 private。 6） 若是 static 成员变量，考虑是否为 final。</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 19pt;text-align: left;">7） 类成员方法只供类内部调用，必须是 private。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">8） 类成员方法只对继承类公开，那么限制为 protected。</p><p class="s27" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">说明：<span style=" color: #333;">任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part6.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part8.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
