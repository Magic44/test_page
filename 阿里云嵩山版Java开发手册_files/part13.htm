<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(十) 前后端规约</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part12.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part14.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">(十) 前后端规约</a><a name="bookmark24">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">1） 协议：生产环境必须使用 HTTPS。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">2） 路径：每一个 API 需对应一个路径，表示API 具体的请求地址：</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">a） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">b） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">c） 路径禁止携带表示请求内容类型的后缀，比如&quot;.json&quot;,&quot;.xml&quot;，通过 accept 头表达即可。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">3） 请求方法：对具体操作的定义，常见的请求方法如下：</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">a） GET：从服务器取出资源。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 110%;text-align: left;">b） POST：在服务器新建一个资源。 c） PUT：在服务器更新资源。</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 19pt;text-align: left;">d） DELETE：从服务器删除资源。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">4） 请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</p><p class="s9" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明<span class="s61">：</span><span style=" color: #333;">此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</span></p><p class="s62" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">3. <span class="s3">【强制】</span><span class="s9">服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">errorMessage、用户提示信息四个部分。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<a href="part33.htm#bookmark63" style=" color: #333; font-family:微软雅黑, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt;">四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考</a><span style=" color: #00F; font-family:微软雅黑, sans-serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 10.5pt;">附表 3</span><span style=" color: #333;">。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">常见的 HTTP 状态码如下</span></p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">1） 200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） 401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">3） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">4） 404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">5） 500 Internal Server Error: 服务器内部错误。</p><p class="s62" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">4. <span class="s3">【强制】</span><span class="s9">在前后端交互的 JSON 格式数据中，所有的 key 必须为小写字母开始的</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">lowerCamelCase 风格，符合英文表达习惯，且表意完整。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">errorCode / errorMessage / assetStatus / menuList / orderList / configFlag</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #333;">ERRORCODE / ERROR_CODE / error_message / error-message / errormessage / ErrorMessage / msg</span></p><p class="s62" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">5. <span class="s3">【强制】</span><span class="s9">errorMessage 是前后端错误追踪机制的体现，可以在前端输出到 type=&quot;hidden&quot;</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。</p><p class="s62" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">6. <span class="s3">【强制】</span><span class="s9">对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">Long 类型。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方</span></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">-1，在取值范围之内，超过 2 的 53 次方 (9007199254740992)的数值转化为 JS 的 Number 时，有些数 值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #333;">通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，&quot;orderId&quot;: 362909601374617692，前端拿到的值却是: 362909601374617660。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>HTTP 请求通过 URL 传递参数时，不能超过 2048 字节。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">不同浏览器对于 URL 的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异，2048字节是取所有浏览器的最小值。</span></p><p class="s18" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #333;">某业务将退货的商品 id 列表放在 URL 中作为参数传递，当一次退货商品数量过多时，URL 参数超长，传递到后端的参数被截断，导致部分商品未能正确退货。</span></p><p class="s62" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">8. <span class="s3">【强制】</span><span class="s9">HTTP 请求通过 body 传递内容时，必须控制长度，超出最大长度后，后端解析会出错。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">nginx 默认限制是 1MB，tomcat 默认限制为 2MB，当确实有业务需要传较大内容时，可以通过调大服务器端的限制。</span></p><p class="s62" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">9. <span class="s3">【强制】</span><span class="s9">在翻页场景中，用户输入参数的小于 1，则前端返回第一页参数给后端；后端发现用户输入的参数大于总页数，直接返回最后一页。</span></p><p class="s62" style="padding-top: 12pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">10. <span class="s3">【强制】</span><span class="s9">服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL 统一代理模块生成，否则会因线上采用 HTTPS 协议而导致浏览器提示“不安全”，并且还会带来 URL 维护不一致的问题。</span></p><p class="s62" style="padding-top: 12pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">11. <span class="s4">【推荐】</span><span class="s9">服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">缓存有利于减少交互次数，减少交互的平均延迟。</span></p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">http 1.1 中，s-maxage 告诉服务器进行缓存，时间单位为秒，用法如下，</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">response.setHeader(&quot;Cache-Control&quot;, &quot;s-maxage=&quot; + cacheSeconds);</p><p class="s62" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">12. <span class="s4">【推荐】</span><span class="s9">服务端返回的数据，使用 JSON 格式而非 XML。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">尽管 HTTP 支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS 甚至 HTML。如果我们使用的面向用户的服务，应该选择 JSON 作为通信中使用的标准数据交换格式，包括请求和响应。此外， application/JSON 是一种通用的 MIME 类型，具有实用、精简、易读的特点。</span></p><p class="s62" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">13. <span class="s4">【推荐】</span><span class="s9">前后端的时间格式统一为&quot;yyyy-MM-dd HH:mm:ss&quot;，统一为 GMT。</span></p><p class="s9" style="padding-top: 11pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">14. <span style=" color: #76923B;">【参考】</span>在接口路径中不要加入版本号，版本控制在 HTTP 头信息中体现，有利于向前兼容。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part12.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part14.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
