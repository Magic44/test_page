<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(二) 二方库依赖</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part27.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part29.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark50">(二) 二方库依赖</a><a name="bookmark54">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>定义 <span class="s12">GAV </span>遵从以下规则：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1） <span style=" color: #00F;">G</span>roupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 110%;text-align: left;"><span style=" color: #967B00;">说明：</span>{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。<span style=" color: #009757;">正例：</span>com.taobao.jstorm <span style=" color: #000;">或 </span>com.alibaba.dubbo.register</p><p style="padding-left: 53pt;text-indent: -5pt;line-height: 110%;text-align: left;">2） <span style=" color: #00F;">A</span>rtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<span style=" color: #009757;">正例：</span>dubbo-client / fastjson-api / jstorm-tool</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 19pt;text-align: left;">3） <span style=" color: #00F;">V</span>ersion：详细规定参考下方。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>二方库版本号命名方式：主版本号.次版本号.修订号</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1）主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 110%;text-align: left;">3） 修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。<span style=" color: #967B00;">说明：</span>注意起始版本号必须为：<span style=" color: #00F;">1.0.0</span>，而不是 0.0.1。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">反例：<span style=" color: #333;">仓库内某二方库版本号从 1.0.0.0 开始，一直默默“升级”成 1.0.0.64，完全失去版本的语义信息。</span></p><p class="s9" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>线上应用不要依赖 <span class="s12">SNAPSHOT </span>版本<span class="s12">（</span>安全包除外<span class="s12">）</span>；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，且版本号不允许覆盖升级。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</span></p><p class="s25" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: left;"><span style=" color: #333;">4. </span><span style=" color: #C00000;">【强制】</span>二方库的新增或升级，保持除功能点之外的其它 <span class="s51">jar </span>包仲裁结果不变。如果有改变，必须明确评估和验证。</p><p class="s26" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><span style=" color: #967B00;">说明：</span>在升级时，进行 <span class="s53">dependency:resolve </span>前后信息比对，如果仲裁结果完全不一致，那么通过</p><p class="s53" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">dependency:tree <span class="s26">命令，找出差异点，进行</span>&lt;exclude&gt;<span class="s26">排除 </span>jar <span class="s26">包。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 <span class="s12">POJO </span>对象。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span>依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>禁止在子项目的 <span class="s12">pom </span>依赖中出现相同的 <span class="s12">GroupId</span>，相同的 <span class="s12">ArtifactId</span>，但是不同的 <span class="s12">Version</span>。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">8. <span style=" color: #FFC000;">【推荐】</span>底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">9. <span style=" color: #FFC000;">【推荐】</span>所有 <span class="s12">pom </span>文件中的依赖声明放在&lt;<span class="s12">dependencies</span>&gt;语句块中，所有版本仲裁放在</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">&lt;<span class="s12">dependencyManagement</span>&gt;语句块中。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">说明：<span style=" color: #333;">&lt;dependencyManagement&gt;里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖， version 和 scope 都读取自父 pom。而&lt;dependencies&gt;所有声明在主 pom 的&lt;dependencies&gt;里的依赖都会自动引入，并默认被所有的子项目继承。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">10. <span style=" color: #FFC000;">【推荐】</span>二方库不要有配置项，最低限度不要再增加配置项。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">11. <span style=" color: #FFC000;">【推荐】</span>不要使用不稳定的工具包或者 Utils 类。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">12. <span style=" color: #76923B;">【参考】</span>为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">1）<b>精简可控原则</b>。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log具体实现，只依赖日志框架。</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">2）<b>稳定可追溯原则</b>。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part27.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part29.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
