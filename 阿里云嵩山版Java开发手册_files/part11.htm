<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(八) 控制语句</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part10.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part12.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">(八) 控制语句</a><a name="bookmark22">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default</p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">语句并且放在最后，即使它什么代码也没有。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">注意 break 是退出 switch 语句块，而 return 是退出方法</span><span style=" color: #23292D;">体。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">判断。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">反例：<span style=" color: #333;">如下的代码输出是什么？</span></p><p class="s28" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">public class <span style=" color: #000;">SwitchString </span><span style=" color: #999;">{</span></p><p class="s30" style="padding-left: 90pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public static void </span><span style=" color: #DD4968;">main</span>(<span style=" color: #000;">String</span>[] <span style=" color: #000;">args</span>) { <span style=" color: #DD4968;">method</span>(<span style=" color: #000;">null</span>);</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 90pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public static void </span><span style=" color: #DD4968;">method</span>(<span style=" color: #000;">String param</span>) { <span style=" color: #07A;">switch </span>(<span style=" color: #000;">param</span>) {</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 肯定不是进入这里</p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">case <span style=" color: #50A04F;">&quot;sth&quot;</span><span style=" color: #A67E58;">:</span></p><p class="s30" style="padding-left: 126pt;text-indent: 0pt;line-height: 85%;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;it&#39;s sth&quot;</span>); <span style=" color: #07A;">break</span>;</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 13pt;text-align: left;">// 也不是进入这里</p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">case <span style=" color: #50A04F;">&quot;null&quot;</span><span style=" color: #A67E58;">:</span></p><p class="s30" style="padding-left: 126pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;it&#39;s null&quot;</span>); <span style=" color: #07A;">break</span>;</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 也不是进入这里</p><p class="s28" style="padding-left: 108pt;text-indent: 0pt;line-height: 14pt;text-align: left;">default<span style=" color: #A67E58;">:</span></p><p class="s30" style="padding-left: 126pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;default&quot;</span>);</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>在 <span class="s12">if</span>/<span class="s12">else</span>/<span class="s12">for</span>/<span class="s12">while</span>/<span class="s12">do </span>语句中必须使用大括号。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">即使只有一行代码，也禁止不采用大括号的编码方式：if (condition) statements;</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐时，可能抛出因自动拆箱导致的 NPE 异常。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">以下两种场景会触发类型对齐的拆箱操作：</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">1） 表达式 1 或表达式 2 的值只要有一个是原始类型。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">2） 表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。<span style=" color: #FF4500;">反例：</span></p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;">Integer a <span style=" color: #A67E58;">= </span><span style=" color: #976800;">1</span><span style=" color: #999;">; </span>Integer b <span style=" color: #A67E58;">= </span><span style=" color: #976800;">2</span><span style=" color: #999;">; </span>Integer c <span style=" color: #A67E58;">= </span>null<span style=" color: #999;">; </span>Boolean flag <span style=" color: #A67E58;">= </span><span style=" color: #0084BA;">false</span><span style=" color: #999;">;</span></p><p class="s31" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</p><p class="s29" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">Integer result<span style=" color: #A67E58;">=</span><span style=" color: #999;">(</span>flag<span style=" color: #A67E58;">? </span>a<span style=" color: #A67E58;">*</span>b <span style=" color: #A67E58;">: </span>c<span style=" color: #999;">);</span></p><p class="s9" style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span><span style=" color: #23292D;">在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #23292D;">如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</span></p><p class="s18" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #23292D;">判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">6. <span style=" color: #FFC000;">【推荐】</span>当某个方法的代码总行数超过 10 行时，return / throw 等中断逻辑的右大括号后均需要加一个空行。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">这样做逻辑清晰，有利于代码阅读时重点关注。</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #FFC000;">【推荐】</span>表达异常的分支时，少用 <span class="s12">if-else 方式</span>，这种方式可以改写成：</p><p class="s30" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">condition</span>) {</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">...</p><p class="s28" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">return <span style=" color: #000;">obj</span><span style=" color: #999;">;</span></p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p class="s31" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// 接着写 else 的业务逻辑代码;</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">说明：<span style=" color: #333;">如果非使用 if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</span></p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">正例：<span style=" color: #333;">超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</span></p><p class="s30" style="padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public void </span><span style=" color: #000;">findBoyfriend </span>(<span style=" color: #000;">Man man</span>) { <span style=" color: #07A;">if </span>(<span style=" color: #000;">man</span>.<span style=" color: #DD4968;">isUgly</span>()) {</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;本姑娘是外貌协会的资深会员&quot;</span>); <span style=" color: #07A;">return</span>;</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">man</span>.<span style=" color: #DD4968;">isPoor</span>()) {</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;贫贱夫妻百事哀&quot;</span>); <span style=" color: #07A;">return</span>;</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span style=" color: #07A;">if </span>(<span style=" color: #000;">man</span>.<span style=" color: #DD4968;">isBadTemper</span>()) {</p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;银河有多远，你就给我滚多远&quot;</span>); <span style=" color: #07A;">return</span>;</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-top: 2pt;padding-left: 72pt;text-indent: 0pt;text-align: left;"><span style=" color: #000;">System</span>.<span style=" color: #000;">out</span>.<span style=" color: #DD4968;">println</span>(<span style=" color: #50A04F;">&quot;可以先交往一段时间看看&quot;</span>);</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 2pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">8. <span style=" color: #FFC000;">【推荐】</span>除常用方法（如 <span class="s12">getXxx/isXxx</span>）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">很多 if 语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">正例：</p><p class="s31" style="padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: left;">// 伪代码如下</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">final boolean </span><span style=" color: #000;">existed </span><span style=" color: #A67E58;">= </span>(<span style=" color: #000;">file</span>.<span style=" color: #DD4968;">open</span>(<span style=" color: #000;">fileName</span>, <span style=" color: #50A04F;">&quot;w&quot;</span>) <span style=" color: #A67E58;">!= </span><span style=" color: #000;">null</span>) <span style=" color: #A67E58;">&amp;&amp; </span>(...) <span style=" color: #A67E58;">|| </span>(...); <span style=" color: #07A;">if </span>(<span style=" color: #000;">existed</span>) {</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">...</p><p class="s30" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p class="s18" style="padding-left: 43pt;text-indent: 0pt;line-height: 15pt;text-align: left;">反例：</p><p class="s30" style="padding-left: 72pt;text-indent: -18pt;line-height: 84%;text-align: left;"><span style=" color: #07A;">public final void </span><span style=" color: #000;">acquire </span>( <span style=" color: #07A;">long </span><span style=" color: #000;">arg</span>) { <span style=" color: #07A;">if </span>(<span style=" color: #A67E58;">!</span><span style=" color: #DD4968;">tryAcquire</span>(<span style=" color: #000;">arg</span>) <span style=" color: #A67E58;">&amp;&amp;</span></p><p class="s30" style="padding-left: 90pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #DD4968;">acquireQueued</span>(<span style=" color: #DD4968;">addWaiter</span>(<span style=" color: #000;">Node</span>.<span style=" color: #000;">EXCLUSIVE</span>), <span style=" color: #000;">arg</span>)) { <span style=" color: #DD4968;">selfInterrupt</span>();</p><p class="s30" style="padding-left: 72pt;text-indent: 0pt;line-height: 15pt;text-align: left;">}</p><p class="s51" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">9. <span class="s4">【推荐】</span><span class="s9">不要在其它表达式（尤其是条件表达式）中，插入赋值语句。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。</span><span style=" color: #FF4500;">反例：</span></p><p class="s28" style="padding-left: 54pt;text-indent: 0pt;line-height: 14pt;text-align: left;">public <span style=" color: #000;">Lock </span><span style=" color: #DD4968;">getLock</span><span style=" color: #999;">(</span>boolean <span style=" color: #000;">fair</span><span style=" color: #999;">) {</span></p><p class="s31" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">// 算术表达式中出现赋值操作，容易忽略 count 值已经被改变</p><p class="s29" style="padding-left: 72pt;text-indent: 0pt;line-height: 14pt;text-align: left;">threshold <span style=" color: #A67E58;">= </span><span style=" color: #999;">(</span>count <span style=" color: #A67E58;">= </span>Integer<span style=" color: #999;">.</span>MAX_VALUE<span style=" color: #999;">) </span><span style=" color: #A67E58;">- </span><span style=" color: #976800;">1</span><span style=" color: #999;">;</span></p><p class="s29" style="padding-left: 72pt;text-indent: 0pt;line-height: 84%;text-align: left;"><span style=" color: #6F8090;">// 条件表达式中出现赋值操作，容易误认为是 sync==fair </span><span style=" color: #07A;">return </span><span style=" color: #999;">(</span>sync <span style=" color: #A67E58;">= </span>fair<span style=" color: #999;">) </span><span style=" color: #A67E58;">? </span><span style=" color: #07A;">new </span>FairSync<span style=" color: #999;">() </span><span style=" color: #A67E58;">: </span><span style=" color: #07A;">new </span>NonfairSync<span style=" color: #999;">();</span></p><p class="s30" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">}</p><p class="s9" style="padding-top: 9pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">10. <span style=" color: #FFC000;">【推荐】</span>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 <span class="s12">try</span>-<span class="s12">catch </span>操作<span class="s12">（</span>这个 <span class="s12">try</span>-<span class="s12">catch </span>是否可以移至循环体外<span class="s12">）</span>。</p><p class="s9" style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11. <span style=" color: #FFC000;">【推荐】</span><span style=" color: #23292D;">避免采用取反逻辑运算符。</span></p><p class="s26" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;"><span style=" color: #967B00;">说明：</span>取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。<span style=" color: #009757;">正例：</span>使用 if (x &lt; 628) 来表达 x 小于 628。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">反例：<span style=" color: #23292D;">使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</span></p><p class="s9" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">12. <span style=" color: #FFC000;">【推荐】</span>公开接口需要进行入参保护，尤其是批量操作的接口。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">反例：<span style=" color: #23292D;">某业务系统，提供一个用户批量查询的接口，API 文档上有说最多查多少个，但接口实现上没做任何保护，导致调用方传了一个 1000 的用户 id 数组过来后，查询信息后，内存爆了。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">13. <span style=" color: #76923B;">【参考】</span>下列情形，需要进行参数校验：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1） 调用频次低的方法。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 110%;text-align: left;">2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</p><p style="padding-left: 47pt;text-indent: 0pt;line-height: 19pt;text-align: left;">3） 需要极高稳定性和可用性的方法。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">5） 敏感权限入口。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">14. <span style=" color: #76923B;">【参考】</span>下列情形，不需要进行参数校验：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 5pt;line-height: 109%;text-align: left;">2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</p><p style="padding-left: 42pt;text-indent: 5pt;line-height: 110%;text-align: left;">3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part10.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part12.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
