<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>七、设计规约</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part29.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part31.htm">下一个 &gt;</a></p><p class="s15" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark56">七、设计规约</a><a name="bookmark57">&zwnj;</a></p><p class="s25" style="padding-top: 11pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">1. <span style=" color: #C00000;">【强制】</span><span style=" color: #00F;">存储方案</span>和<span style=" color: #00F;">底层数据结构</span>的设计获得评审一致通过，并沉淀成为文档。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">说明：<span style=" color: #23292D;">有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">正例：<span style=" color: #23292D;">评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字</span><span style=" color: #333;">段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。</span></p><p class="s25" style="padding-top: 11pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>在需求分析阶段，如果与系统交互的 User 超过<span style=" color: #00F;">一类</span>并且相关的 User Case 超过 <span style=" color: #00F;">5 个</span>，使用用例图来表达更加清晰的结构化需求。</p><p class="s25" style="padding-top: 12pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>如果某个业务对象的状态超过 <span style=" color: #00F;">3 个</span>，使用状态图来表达并且明确状态变化的各个触发条件。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #23292D;">状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">正例：<span style=" color: #23292D;">淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>如果系统中某个功能的调用链路上的涉及对象超过 <span style=" color: #00F;">3 个</span>，使用时序图来表达并且明确各调用环节的输入与输出。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 42pt;text-indent: -18pt;text-align: left;">5. <span style=" color: #C00000;">【强制】</span>如果系统中模型类超过 <span style=" color: #00F;">5 个</span>，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #23292D;">类图像建筑领域的施工图，如果搭平房，可能不需要，但如果建造蚂蚁 Z 空间大楼，肯定需要详细的施工图。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">6. <span style=" color: #C00000;">【强制】</span>如果系统中超过 <span style=" color: #00F;">2 个</span>对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。</span></p><p class="s25" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #FFC000;">【推荐】</span>系统架构设计时明确以下目标：</p><p class="s80" style="padding-top: 4pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s81"> </span><span class="s35">确定系统边界。确定系统在技术层面上的做与不做。</span></p><p class="s80" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s81"> </span><span class="s35">确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。</span></p><p class="s80" style="padding-top: 5pt;padding-left: 78pt;text-indent: -18pt;line-height: 110%;text-align: left;"><span class="s81"> </span><span class="s35">确定指导后续设计与演化的原则。使后续的子系统或模块设计在一个既定的框架内和技术方向上继续演化。</span></p><p class="s80" style="padding-top: 4pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s81"> </span><span class="s35">确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 42pt;text-indent: -18pt;line-height: 106%;text-align: justify;">8. <span style=" color: #FFC000;">【推荐】</span>需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。<span class="s23">反例：</span><span class="s48">用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">9. <span style=" color: #FFC000;">【推荐】</span>类在设计与实现时要符合单一原则。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</span></p><p class="s25" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">10. <span style=" color: #FFC000;">【推荐】</span>谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #23292D;">不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11. <span style=" color: #FFC000;">【推荐】</span>系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</span></p><p class="s25" style="padding-top: 12pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">12. <span style=" color: #FFC000;">【推荐】</span>系统设计阶段，注意对扩展开放，对修改闭合。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 42pt;text-indent: -18pt;text-align: justify;"><span class="s25">13. </span><span class="s4">【推荐】</span><span class="s25">系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 </span>DRY <span class="s82">原则（</span>Don<span class="s82">&#39;</span>t Repeat Yourself）<span class="s25">。</span></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;"><span style=" color: #967B00;">说明：</span><span style=" color: #23292D;">随着代码的重复次数不断增加，维护成本指数级上升。</span>随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。<span style=" color: #009757;">正例：</span>一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p><p style="padding-left: 79pt;text-indent: 0pt;line-height: 16pt;text-align: justify;">private boolean checkParam(DTO dto) {...}</p><p class="s25" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">14. <span style=" color: #FFC000;">【推荐】</span>避免如下误解：<span style=" color: #000;">敏捷开发 = 讲故事 + 编码 + 发布。</span></p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #23292D;">敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。</span></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">反例：<span style=" color: #23292D;">某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">15. <span style=" color: #76923B;">【参考】</span>设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #23292D;">避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">16. <span style=" color: #76923B;">【参考】</span>可扩展性的本质是找到系统的变化点，并隔离变化点。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #23292D;">世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</span></p><p class="s24" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #23292D;">极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</span></p><p class="s25" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">17. <span style=" color: #76923B;">【参考】</span>设计的本质就是识别和表达系统难点。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #23292D;">识别和表达完全是两回事，很多人错误地认为识别到系统难点在哪里，表达只是自然而然的事情，但是大家在设计评审中经常出现语焉不详，甚至是词不达意的情况。准确地表达系统难点需要具备如下能力： 表达规则和表达工具的熟练性。抽象思维和总结能力的局限性。基础知识体系的完备性。深入浅出的生动表达力。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">18. <span style=" color: #76923B;">【参考】</span>代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #23292D;">代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。</span></p><p class="s25" style="padding-top: 10pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">19. <span style=" color: #76923B;">【参考】</span>在做无障碍产品设计时，需要考虑到：</p><p class="s80" style="padding-top: 7pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s81"> </span><span class="s35">所有可交互的控件元素必须能被 tab 键聚焦，并且焦点顺序需符合自然操作逻辑。</span></p><p class="s80" style="padding-top: 9pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s81"> </span><span class="s35">用于登录校验和请求拦截的验证码均需提供图形验证以外的其它方式。</span></p><p class="s74" style="padding-top: 9pt;padding-left: 60pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="s35">自定义的控件类型需明确交互方式。</span></p><p class="s26" style="padding-top: 9pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;"><span style=" color: #009757;">正例：</span>用户登<span style=" color: #000;">录</span>场景中，输入框的按钮都需要考虑 tab 键聚焦，符合自然逻辑的操作顺序如下，“输入用户名，输入密码，输入验证码，点击登录”，其中验证码实现语音验证方式。如果有自定义标签实现的控件设置控件类型可使用 role 属性。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part29.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part31.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
