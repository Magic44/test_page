<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(一) 应用分层</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part26.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part28.htm">下一个 &gt;</a></p><p class="s16" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark49">(一) 应用分层</a><a name="bookmark53">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">1. <span style=" color: #FFC000;">【推荐】</span>根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示，默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层</p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">（Controller 层），也可以直接依赖于 Service 层，依此类推：</p><p style="padding-left: 141pt;text-indent: 0pt;text-align: left;"><span><img width="336" height="308" alt="image" src="Image_002.jpg"/></span></p><p class="s78" style="padding-top: 6pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成http 接口；网关控制层等。</span></p><p class="s78" style="padding-top: 5pt;padding-left: 63pt;text-indent: -18pt;line-height: 110%;text-align: left;"><span class="s75"> </span><span class="p">终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</span></p><p class="s78" style="padding-top: 3pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75">  </span><span class="p">Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</span></p><p class="s78" style="padding-top: 5pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75">  </span><span class="p">Service 层：相对具体的业务逻辑服务层。</span></p><p class="s78" style="padding-top: 5pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75">  </span><span class="p">Manager 层：通用业务处理层，它有如下特征：</span></p><p style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">1） 对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。</p><p style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</p><p style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">3） 与 DAO 层交互，对多个 DAO 的组合复用。</p><p class="s78" style="padding-top: 5pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75">  </span><span class="p">DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。</span></p><p class="s78" style="padding-top: 5pt;padding-left: 63pt;text-indent: -18pt;line-height: 109%;text-align: left;"><span class="s75"> </span><span class="p">第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、高德地图服务等。</span></p><p class="s78" style="padding-top: 3pt;padding-left: 45pt;text-indent: 0pt;text-align: left;"><span class="s75"> </span><span class="p">外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 42pt;text-indent: -18pt;text-align: justify;">2. <span style=" color: #76923B;">【参考】</span><span class="s12">（</span>分层异常处理规约<span class="s12">）</span>在 <span class="s12">DAO </span>层，产生的异常类型有很多，无法用细粒度的异常进 行 <span class="s12">catch</span>，使用 <span class="s12">catch(Exception e)</span>方式，并 <span class="s12">throw new DAOException(e)</span>，不需要打印日志，因为日志在 <span class="s12">Manager</span>/<span class="s12">Service </span>层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，</p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">浪费性能和存储。在 <span class="s12">Service </span>层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。<span class="s12">Manager </span>层与 <span class="s12">Service </span>同机部署，日志方式与 <span class="s12">DAO </span>层处理一致，如果是单独部署，则采用与 <span class="s12">Service </span>一致的处理方式。<span class="s12">Web </span>层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">3. <span style=" color: #76923B;">【参考】</span>分层领域模型规约：</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="22" height="24" alt="image" src="Image_003.png"/></span></p><p class="s78" style="padding-top: 2pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><span class="s75">  </span><span class="p">DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</span></p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">DTO</p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">DTO</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">DTO</p><p class="s78" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><span class="s75">    </span><span class="p">（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</span></p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">BO</p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">BO</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">BO</p><p class="s78" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><span class="s75">   </span><span class="p">（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</span></p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">Query</p><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">Query</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 18pt;text-align: left;">Query</p><p class="s78" style="padding-top: 5pt;padding-left: 60pt;text-indent: -18pt;line-height: 110%;text-align: left;"><span class="s75">     </span><span class="p">：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</span></p><p style="padding-top: 3pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><span class="s78"></span><span class="s75">  </span><span class="s79" style=" background-color: #D9D9D9;">VO</span><span class="p">（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part26.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part28.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
