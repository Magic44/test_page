<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(二) 索引规约</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part22.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part24.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark40">(二) 索引规约</a><a name="bookmark45">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>超过三个表禁止 <span class="s12">join</span>。需要 <span class="s12">join </span>的字段，数据类型保持绝对一致<span class="s12">；</span>多表关联查询时，保证被关联的字段需要有索引。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">即使双表 join 也要注意表索引、SQL 性能。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>在 <span class="s12">varchar </span>字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</p><p class="s27" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;">以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">4. <span style=" color: #C00000;">【强制】</span>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">5. <span style=" color: #FFC000;">【推荐】</span>如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">正例：<span style=" color: #333;">where a=? and b=? order by c; 索引：a_b_c</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">反例：<span style=" color: #333;">索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">6. <span style=" color: #FFC000;">【推荐】</span>利用覆盖索引来进行查询操作，避免回表。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">说明：<span style=" color: #333;">如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">正例：<span style=" color: #333;">能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">7. <span style=" color: #FFC000;">【推荐】</span>利用延迟关联或者子查询优化超多分页场景。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">说明：<span style=" color: #333;">MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL改写。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">正例：<span style=" color: #333;">先快速定位需要获取的 id 段，然后再关联：</span></p><p class="s43" style="padding-top: 2pt;padding-left: 69pt;text-indent: 0pt;text-align: justify;">SELECT t1.* FROM 表 1 as t1, (select id from 表 1 where 条件 LIMIT 100000,20 ) as t2 where t1.id=t2.id</p><p class="s9" style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">8. <span style=" color: #FFC000;">【推荐】</span><span class="s12">SQL </span>性能优化的目标：至少要达到 <span class="s12">range </span>级别，要求是 <span class="s12">ref </span>级别，如果可以是 <span class="s12">consts</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: left;">最好。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">1） consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;line-height: 110%;text-align: left;">2） ref 指的是使用普通的索引（normal index）。 3） range 对索引进行范围检索。</p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">反例：<span style=" color: #333;">explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">还低，与全表扫描是小巫见大巫。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">9. <span style=" color: #FFC000;">【推荐】</span>建组合索引的时候，区分度最高的在最左边。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">如果 where a=? and b=?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</span></p><p class="s27" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d=?</span></p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">那么即使 c 的区分度更高，也必须把d 放在索引的最前列，即建立组合索引 idx_d_c。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">10. <span style=" color: #FFC000;">【推荐】</span>防止因字段类型不同造成的隐式转换，导致索引失效。</p><p class="s9" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11. <span style=" color: #76923B;">【参考】</span>创建索引时避免有如下极端误解：</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;">1） 索引宁滥勿缺。认为一个查询就需要建一个索引。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） 吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">3） 抵制惟一索引。认为惟一索引一律需要在应用层通过“先查后插”方式解决。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part22.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part24.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
