<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>(三) SQL语句</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part23.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part25.htm">下一个 &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark41">(三) SQL 语句</a><a name="bookmark46">&zwnj;</a></p><p class="s9" style="padding-top: 4pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">1. <span style=" color: #C00000;">【强制】</span>不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：<span style=" color: #333;">count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">2. <span style=" color: #C00000;">【强制】</span>count(distinct col) 计算该列除NULL 之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">3. <span style=" color: #C00000;">【强制】</span>当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为 NULL，因此使用 sum()时需注意 NPE 问题。</p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">正例：<span style=" color: #333;">可以使用如下方式来避免 sum 的 NPE 问题：SELECT IFNULL(SUM(column), 0) FROM table;</span></p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">4. <span style=" color: #C00000;">【强制】</span>使用 <span class="s64">ISNULL()</span>来判断是否为 <span class="s64">NULL </span>值。</p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span style=" color: #967B00;">说明：</span>NULL <span style=" color: #333;">与任何值的直接比较都为 </span>NULL<span style=" color: #00F;">。</span></p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">1） <span style=" color: #00F;">NULL&lt;&gt;NULL </span>的返回结果是 <span style=" color: #000;">NULL</span>，而不是 <span style=" color: #C6244E;">false</span>。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">2） <span style=" color: #00F;">NULL=NULL </span>的返回结果是 <span style=" color: #000;">NULL</span>，而不是 <span style=" color: #C6244E;">true</span>。</p><p style="padding-top: 1pt;padding-left: 47pt;text-indent: 0pt;text-align: justify;">3） <span style=" color: #00F;">NULL&lt;&gt;1 </span>的返回结果是 <span style=" color: #000;">NULL</span>，而不是 <span style=" color: #C6244E;">true</span>。</p><p class="s18" style="padding-top: 9pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">反例：<span style=" color: #333;">在 SQL 语句中，如果在 null 前换行，影响可读性。select * from table where column1 is null and column3 is not null; 而`ISNULL(column)`是一个整体，简洁易懂。从性能数据上分析，`ISNULL(column)`执行效率更快一些。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">5. <span style=" color: #C00000;">【强制】</span>代码中写分页查询逻辑时，若 <span class="s12">count </span>为 0 应直接返回，避免执行后面的分页语句。</p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">6. <span style=" color: #C00000;">【强制】</span>不得使用外键与级联，一切外键概念必须在应用层解决。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: left;">说明：<span style=" color: #333;">（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">7. <span style=" color: #C00000;">【强制】</span>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">8. <span style=" color: #C00000;">【强制】</span>数据订正（特别是删除或修改记录操作）时，要先 <span class="s12">select</span>，避免出现误删除，确认无误才能执行更新语句。</p><p class="s9" style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">9. <span style=" color: #C00000;">【强制】</span>对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: left;">说明：<span style=" color: #333;">对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: left;">正例：<span style=" color: #333;">select t1.name from table_first as t1 , table_second as t2 where t1.id=t2.id;</span></p><p class="s18" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 109%;text-align: justify;">反例：<span style=" color: #333;">在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column &#39;name&#39; in field list is ambiguous。</span></p><p class="s9" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">10. <span style=" color: #FFC000;">【推荐】</span>SQL 语句中表的别名前加 as，并且以 t1、t2、t3、...的顺序依次命名。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;line-height: 110%;text-align: justify;">说明：<span style=" color: #333;">1）别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。2）别名前加 as 使别名更容易识别。</span></p><p class="s24" style="padding-left: 42pt;text-indent: 0pt;line-height: 19pt;text-align: justify;">正例：<span style=" color: #333;">select t1.name from table_first as t1, table_second as t2 where t1.id=t2.id;</span></p><p class="s9" style="padding-top: 8pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">11. <span style=" color: #FFC000;">【推荐】</span><span class="s12">in </span>操作能避免则避免，若实在避免不了，需要仔细评估 <span class="s12">in </span>后边的集合元素数量，控制在 1000 个之内。</p><p class="s9" style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: justify;">12. <span style=" color: #76923B;">【参考】</span>因国际化需要，所有的字符存储与表示，均采用 <span class="s12">utf</span>8 字符集，那么字符计数方法需要注意。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">说明：</p><p style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">SELECT LENGTH(&quot;轻松工作&quot;)； 返回为 12</p><p style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">SELECT CHARACTER_LENGTH(&quot;轻松工作&quot;)； 返回为 4</p><p style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf8 编码的区别。</p><p class="s9" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;line-height: 22pt;text-align: left;">13. <span style=" color: #76923B;">【参考】</span><span class="s12">TRUNCATE TABLE </span>比 <span class="s12">DELETE </span>速度快，且使用的系统和事务日志资源少，但 <span class="s12">TRUNCATE</span></p><p class="s9" style="padding-left: 42pt;text-indent: 0pt;line-height: 22pt;text-align: justify;">无事务且不触发 <span class="s12">trigger</span>，有可能造成事故，故不建议在开发代码中使用此语句。</p><p class="s27" style="padding-left: 42pt;text-indent: 0pt;text-align: justify;">说明：<span style=" color: #333;">TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part23.htm">&lt; 上一个</a><span> | </span><a href="../阿里云嵩山版Java开发手册.html">内容</a><span> | </span><a href="part25.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
